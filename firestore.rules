rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }
    function isOwnerForCreate() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    match /quotes/{quoteId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource);
      allow create: if isSignedIn() && isOwnerForCreate();
    }

    match /clients/{clientId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwnerForCreate();
      allow update, delete: if isSignedIn() && isOwner(resource);
    }

    match /jobs/{jobId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource);
      allow create: if isSignedIn() && isOwnerForCreate();
    }

    match /payments/{paymentId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource);
      allow create: if isSignedIn() && isOwnerForCreate();
    }

    // Each user can manage a single document under /users/{uid}
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    match /accounts/{accountId}/{document=**} {
      allow read, write: if isSignedIn() && get(/databases/$(database)/documents/accounts/$(accountId)).data.ownerId == request.auth.uid;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}