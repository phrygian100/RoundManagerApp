rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }
    function isOwnerForCreate() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    // Check if user has access to account data (either owner or member)
    function hasAccountAccess(ownerId) {
      return request.auth.uid == ownerId || 
        exists(/databases/$(database)/documents/accounts/$(ownerId)/members/$(request.auth.uid));
    }

    // Check if user has access to existing resource
    function hasResourceAccess(resource) {
      return hasAccountAccess(resource.data.ownerId);
    }

    // Check if user has access for creating new resource
    function hasCreateAccess() {
      return hasAccountAccess(request.resource.data.ownerId);
    }

    match /quotes/{quoteId} {
      allow read, update, delete: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
    }

    match /clients/{clientId} {
      allow read: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    match /jobs/{jobId} {
      allow read, update, delete: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
    }

    match /payments/{paymentId} {
      allow read, update, delete: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
    }

    // Each user can manage a single document under /users/{uid}
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    match /accounts/{accountId} {
      allow read: if isSignedIn() && hasAccountAccess(accountId);
      allow create, update, delete: if isSignedIn() && request.auth.uid == accountId;

      match /members/{memberId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        allow write: if isSignedIn() && request.auth.uid == accountId;
      }

      match /vehicles/{vehicleId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        allow write: if isSignedIn() && request.auth.uid == accountId;
      }

      match /rota/{rotaId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        allow write: if isSignedIn() && hasAccountAccess(accountId);
      }
    }

    // Completed weeks - members can read, only owners can write
    match /completedWeeks/{docId} {
      allow read: if isSignedIn() && hasAccountAccess(resource.data.accountId);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && isOwner(resource);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}