rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }
    
    function isOwnerForCreate() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    // Check if user has access to account data (either owner or member)
    function hasAccountAccess(ownerId) {
      return request.auth.uid == ownerId || 
        exists(/databases/$(database)/documents/accounts/$(ownerId)/members/$(request.auth.uid));
    }

    // Check if user has access to existing resource
    function hasResourceAccess(resource) {
      // Handle documents that might not have ownerId field
      return ('ownerId' in resource.data && hasAccountAccess(resource.data.ownerId)) ||
             // Fallback: check if user is trying to access their own data
             (request.auth.uid == resource.id);
    }

    // Check if user has access for creating new resource
    function hasCreateAccess() {
      // Handle documents that might not have ownerId field
      return ('ownerId' in request.resource.data && hasAccountAccess(request.resource.data.ownerId)) ||
             // Allow users to create their own resources
             (request.auth.uid == request.resource.data.ownerId);
    }

    match /quotes/{quoteId} {
      // Allow list operations for signed in users - the query filter will handle access control
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    match /clients/{clientId} {
      // Allow list operations for signed in users - the query filter will handle access control
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    match /jobs/{jobId} {
      // Allow list operations for signed in users - the query filter will handle access control
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    // Service plans (new separated scheduling model)
    match /servicePlans/{planId} {
      // Allow list operations for signed in users - queries are filtered by ownerId
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    match /payments/{paymentId} {
      // Allow list operations for signed in users - the query filter will handle access control
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    match /unknownPayments/{unknownPaymentId} {
      // Allow list operations for signed in users - the query filter will handle access control
      allow list: if isSignedIn();
      allow get: if isSignedIn() && hasResourceAccess(resource);
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && hasResourceAccess(resource);
    }

    // Each user can manage a single document under /users/{uid}
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    match /accounts/{accountId} {
      allow read: if isSignedIn() && hasAccountAccess(accountId);
      allow create, update, delete: if isSignedIn() && request.auth.uid == accountId;

      match /members/{memberId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        // Allow owners to write all members, and members to delete their own record (for leave team)
        allow write: if isSignedIn() && (request.auth.uid == accountId || 
                                        (request.auth.uid == memberId && !('status' in request.resource.data)));
        allow delete: if isSignedIn() && (request.auth.uid == accountId || request.auth.uid == memberId);
      }

      match /vehicles/{vehicleId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        allow write: if isSignedIn() && request.auth.uid == accountId;
      }

      match /rota/{rotaId} {
        allow read: if isSignedIn() && hasAccountAccess(accountId);
        allow write: if isSignedIn() && hasAccountAccess(accountId);
      }
    }

    // Completed weeks - members can read, only owners can write
    match /completedWeeks/{docId} {
      // Allow list operations for signed in users
      allow list: if isSignedIn();
      // Allow read if user is signed in and either:
      // 1. Document has accountId field and user has access to that account
      // 2. Document has ownerId field and user has access to that owner
      // 3. The docId contains the user's ID (for backward compatibility)
      allow get: if isSignedIn() && (
        ('accountId' in resource.data && hasAccountAccess(resource.data.accountId)) ||
        ('ownerId' in resource.data && hasAccountAccess(resource.data.ownerId)) ||
        (docId.matches('.*' + request.auth.uid + '.*'))
      );
      allow create: if isSignedIn() && hasCreateAccess();
      allow update, delete: if isSignedIn() && (
        ('ownerId' in resource.data && isOwner(resource)) ||
        ('accountId' in resource.data && resource.data.accountId == request.auth.uid)
      );
    }

    // Audit logs - owners and members can read, authenticated users can create
    match /auditLogs/{auditId} {
      // Allow authenticated users to create audit log entries for accounts they have access to
      allow create: if isSignedIn() && hasAccountAccess(request.resource.data.ownerId);
      
      // Allow owners and members to read audit logs for their account
      allow read: if isSignedIn() && hasAccountAccess(resource.data.ownerId);
      
      // Allow list operations for owners and members
      allow list: if isSignedIn();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}